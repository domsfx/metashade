# Copyright 2023 Pavlo Penenko
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ATTENTION! This file has been auto-generated by
# https://github.com/ppenenko/DirectXShaderCompiler/blob/metashade/issues/9/export_intrinsics/utils/metashade/export_intrinsics.py

def test(sh):
	with sh.function("test_acos", sh.Float)():
		sh.f_acos = sh.g_f.acos()
		sh.return_( sh.f_acos )

	with sh.function("test_asin", sh.Float)():
		sh.f_asin = sh.g_f.asin()
		sh.return_( sh.f_asin )

	with sh.function("test_atan", sh.Float)():
		sh.f_atan = sh.g_f.atan()
		sh.return_( sh.f_atan )

	with sh.function("test_ceil", sh.Float)():
		sh.f_ceil = sh.g_f.ceil()
		sh.return_( sh.f_ceil )

	with sh.function("test_cos", sh.Float)():
		sh.f_cos = sh.g_f.cos()
		sh.return_( sh.f_cos )

	with sh.function("test_cosh", sh.Float)():
		sh.f_cosh = sh.g_f.cosh()
		sh.return_( sh.f_cosh )

	with sh.function("test_ddx", sh.Float)():
		sh.f_ddx = sh.g_f.ddx()
		sh.return_( sh.f_ddx )

	with sh.function("test_ddx_coarse", sh.Float)():
		sh.f_ddx_coarse = sh.g_f.ddx_coarse()
		sh.return_( sh.f_ddx_coarse )

	with sh.function("test_ddx_fine", sh.Float)():
		sh.f_ddx_fine = sh.g_f.ddx_fine()
		sh.return_( sh.f_ddx_fine )

	with sh.function("test_ddy", sh.Float)():
		sh.f_ddy = sh.g_f.ddy()
		sh.return_( sh.f_ddy )

	with sh.function("test_ddy_coarse", sh.Float)():
		sh.f_ddy_coarse = sh.g_f.ddy_coarse()
		sh.return_( sh.f_ddy_coarse )

	with sh.function("test_ddy_fine", sh.Float)():
		sh.f_ddy_fine = sh.g_f.ddy_fine()
		sh.return_( sh.f_ddy_fine )

	with sh.function("test_degrees", sh.Float)():
		sh.f_degrees = sh.g_f.degrees()
		sh.return_( sh.f_degrees )

	with sh.function("test_exp", sh.Float)():
		sh.f_exp = sh.g_f.exp()
		sh.return_( sh.f_exp )

	with sh.function("test_exp2", sh.Float)():
		sh.f_exp2 = sh.g_f.exp2()
		sh.return_( sh.f_exp2 )

	with sh.function("test_floor", sh.Float)():
		sh.f_floor = sh.g_f.floor()
		sh.return_( sh.f_floor )

	with sh.function("test_frac", sh.Float)():
		sh.f_frac = sh.g_f.frac()
		sh.return_( sh.f_frac )

	with sh.function("test_fwidth", sh.Float)():
		sh.f_fwidth = sh.g_f.fwidth()
		sh.return_( sh.f_fwidth )

	with sh.function("test_log", sh.Float)():
		sh.f_log = sh.g_f.log()
		sh.return_( sh.f_log )

	with sh.function("test_log10", sh.Float)():
		sh.f_log10 = sh.g_f.log10()
		sh.return_( sh.f_log10 )

	with sh.function("test_log2", sh.Float)():
		sh.f_log2 = sh.g_f.log2()
		sh.return_( sh.f_log2 )

	with sh.function("test_radians", sh.Float)():
		sh.f_radians = sh.g_f.radians()
		sh.return_( sh.f_radians )

	with sh.function("test_rcp", sh.Float)():
		sh.f_rcp = sh.g_f.rcp()
		sh.return_( sh.f_rcp )

	with sh.function("test_round", sh.Float)():
		sh.f_round = sh.g_f.round()
		sh.return_( sh.f_round )

	with sh.function("test_rsqrt", sh.Float)():
		sh.f_rsqrt = sh.g_f.rsqrt()
		sh.return_( sh.f_rsqrt )

	with sh.function("test_saturate", sh.Float)():
		sh.f_saturate = sh.g_f.saturate()
		sh.return_( sh.f_saturate )

	with sh.function("test_sin", sh.Float)():
		sh.f_sin = sh.g_f.sin()
		sh.return_( sh.f_sin )

	with sh.function("test_sinh", sh.Float)():
		sh.f_sinh = sh.g_f.sinh()
		sh.return_( sh.f_sinh )

	with sh.function("test_sqrt", sh.Float)():
		sh.f_sqrt = sh.g_f.sqrt()
		sh.return_( sh.f_sqrt )

	with sh.function("test_tan", sh.Float)():
		sh.f_tan = sh.g_f.tan()
		sh.return_( sh.f_tan )

	with sh.function("test_tanh", sh.Float)():
		sh.f_tanh = sh.g_f.tanh()
		sh.return_( sh.f_tanh )

	with sh.function("test_trunc", sh.Float)():
		sh.f_trunc = sh.g_f.trunc()
		sh.return_( sh.f_trunc )

